{"version":3,"sources":["components/CountdownTimerList.js","App.js","reportWebVitals.js","index.js"],"names":["CountdownTimerList","time","autostart","step","onTick","onTimeEnd","onTimePause","useState","timer","setTimer","timerOn","setTimerOn","hasTimerEnd","useEffect","interval","setInterval","prevTimer","clearInterval","className","slice","onClick","App","console","log","timeLeft","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAsDeA,MAnDf,YAAsF,IAAzDC,EAAwD,EAAxDA,KAAMC,EAAkD,EAAlDA,UAAWC,EAAuC,EAAvCA,KAAMC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,YAErE,EAA0BC,mBAASN,GAAnC,mBAAOO,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAASL,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KACMC,EAAcJ,GAAS,EAyB7B,OAvBAK,qBAAU,WACR,IAAIC,EAAW,KASf,OARGJ,IAA2B,IAAhBE,EACZE,EAAWC,aAAY,WACrBN,GAAS,SAAAO,GAAS,OAAIA,EAAY,KAClCZ,EAAOI,KACNL,GAEHc,cAAcH,GAET,WACLG,cAAcH,MAEf,CAACN,EAAOE,EAASP,EAAMC,EAAQQ,IAElCC,qBAAU,WACLD,IACDK,cAAcN,GACdA,GAAW,GACXN,OAED,CAACO,EAAaP,IAGf,qBAAKa,UAAU,YAAf,SACE,gCACE,sBAAKA,UAAU,uBAAf,UACE,kDACA,sBAAMA,UAAU,iBAAhB,UAAmC,IAAMV,GAAOW,OAAO,QAEzD,sBAAKD,UAAU,aAAf,UACE,wBAAQE,QAAS,kBAAMT,GAAW,IAAlC,mBACA,wBAAQS,QAAS,kBAAMX,EAASR,IAAhC,mBACA,wBAAQmB,QAAS,kBAAMT,GAAW,IAAlC,kBACA,wBAAQS,QAAS,WACfT,GAAW,GACXL,KAFF,6BCzBKe,MAff,WACE,OACE,qBAAKH,UAAU,MAAf,SACE,cAAC,EAAD,CACEjB,KAAK,IACLC,WAAW,EACXE,OAAQ,SAACH,GAAD,OAAUqB,QAAQC,IAAI,0FAAsBtB,IACpDE,KAAK,OACLE,UAAW,kBAAMiB,QAAQC,IAAI,6DAC7BjB,YAAa,SAACkB,GAAD,OAAcF,QAAQC,IAAI,2FCAhCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e20558e0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport  './CountdownTimerListStyles.css'\r\n\r\nfunction CountdownTimerList({time, autostart, step, onTick, onTimeEnd, onTimePause}) {\r\n\r\n  const [timer, setTimer] = useState(time);\r\n  const [timerOn, setTimerOn] = useState(autostart);\r\n  const hasTimerEnd = timer <= 0;\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if(timerOn && hasTimerEnd !== true) {\r\n      interval = setInterval(() => {\r\n        setTimer(prevTimer => prevTimer - 1)\r\n        onTick(timer)\r\n      }, step)\r\n    } else {\r\n      clearInterval(interval)\r\n    }\r\n    return () => { \r\n      clearInterval(interval)\r\n    }\r\n  }, [timer, timerOn, step, onTick, hasTimerEnd])\r\n\r\n  useEffect(() => {\r\n    if(hasTimerEnd){\r\n      clearInterval(setTimerOn)\r\n      setTimerOn(false)\r\n      onTimeEnd()\r\n    }\r\n  }, [hasTimerEnd, onTimeEnd])\r\n\r\n  return (\r\n    <div className=\"container\"> \r\n      <div>\r\n        <div className=\"timer timer__display\">\r\n          <span>Time are left:</span>\r\n          <span className=\"timer__display\">{(\"0\" + timer).slice(-2)}</span>\r\n        </div>\r\n        <div className=\"timer__btn\"> \r\n          <button onClick={() => setTimerOn(true)}>Start</button>\r\n          <button onClick={() => setTimer(time)}>Reset</button>\r\n          <button onClick={() => setTimerOn(false)}>Stop</button>\r\n          <button onClick={() => {\r\n            setTimerOn(true)\r\n            onTimePause()}}\r\n          >Resume</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n  );\r\n}\r\n\r\nexport default CountdownTimerList;","import './App.css';\nimport CountdownTimerList from './components/CountdownTimerList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CountdownTimerList \n        time=\"5\"\n        autostart={false}\n        onTick={(time) => console.log(\"Залишилось часу: \" + time)}\n        step=\"1000\"\n        onTimeEnd={() => console.log(\"Час вийшов!\")}\n        onTimePause={(timeLeft) => console.log(\"Таймер на паузі!\")}\n      />\n    </div>\n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}